# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/02_preprocess.cut_roi.ipynb.

# %% auto 0
__all__ = ['frm_full_img_to_splits', 'frm_full_img_to_splits_folder', 'parse_args_', 'main_']

# %% ../../nbs/02_preprocess.cut_roi.ipynb 4
import numpy as np
import pandas as pd
from tqdm.auto import tqdm
import shutil
import os
from fastcore.all import *
import cv2
from typing import List 

# %% ../../nbs/02_preprocess.cut_roi.ipynb 6
from cv_tools.core import *

# %% ../../nbs/02_preprocess.cut_roi.ipynb 15
def frm_full_img_to_splits(
        im_path:Union[str, Path], # Path to full image
		template_img:List[np.ndarray],# List of 4 template images starting 1-4
		save_path:Union[str, Path]=None, # Path to save cutted images
		show:bool=False

		): 
		
  'Cut ROI from full image'
  img = read_img(im_path, gray=True)
  for idx, i in enumerate(template_img):
    x, y, w, h = get_template_part(img, tmp_img=i)
    tmp_part = img[y:y+h, x:x+w]
    if show: 
        show_(tmp_part)
    if save_path is not None:
		# as signatture starts with idx 1, so idx +1 is used
        cv2.imwrite(f'{save_path}/{Path(im_path).stem}_sig_{idx+1}.png', tmp_part)



# %% ../../nbs/02_preprocess.cut_roi.ipynb 16
def frm_full_img_to_splits_folder(
        im_path:Union[str, Path], # folder path where all images needs to be spllit
		template_img:List[np.ndarray],# List of 4 template images starting 1-4
		save_path:Union[str, Path]=None, # Path to save cutted images

   	):
	'loop through all images in folder and cut ROI from full image'

	if save_path is not None:
		Path(save_path).mkdir(exist_ok=True, parents=True)
	parallel(
		partial(frm_full_img_to_splits, template_img=template_img, save_path=save_path),
		Path(im_path).ls(),
		progress=True,
		n_workers=8
	)

	#for i in tqdm(Path(im_path).ls(),total=len(Path(im_path).ls())):
		#frm_full_img_to_splits(i, template_img, save_path=save_path)

# %% ../../nbs/02_preprocess.cut_roi.ipynb 18
def parse_args_():

	import argparse
	parser = argparse.ArgumentParser(description='Cut ROI from the image')
	parser.add_argument('--im_path', type=str, help='Path to full image')
	parser.add_argument(
		'--tmp_img1', 
		type=str, 
		default='/home/hasan/Schreibtisch/projects/data/crack_detect_usm/temp/sig1',
		help='signature 1 template image path only path not with image name')
	parser.add_argument(
		'--tmp_img2', 
		type=str, 
		default='/home/hasan/Schreibtisch/projects/data/crack_detect_usm/temp/sig2',
		help='signature 2 template image path')
	parser.add_argument(
		'--tmp_img3', 
		type=str, 
		default='/home/hasan/Schreibtisch/projects/data/crack_detect_usm/temp/sig3',
		help='signature 3 template image path')
	parser.add_argument(
		'--tmp_img4', 
		type=str, 
		default='/home/hasan/Schreibtisch/projects/data/crack_detect_usm/temp/sig4',
		help='signature 4 template image path')
	parser.add_argument('--save_path', type=str, help='Path to save cutted images')

	args = parser.parse_args()
	return args

# %% ../../nbs/02_preprocess.cut_roi.ipynb 19
def main_():
	args = parse_args_()
	tmp_sig1_img = read_img(Path(args.tmp_img1).ls()[0])
	tmp_sig2_img = read_img(Path(args.tmp_img2).ls()[0])
	tmp_sig3_img = read_img(Path(args.tmp_img3).ls()[0])
	tmp_sig4_img = read_img(Path(args.tmp_img4).ls()[0])
	frm_full_img_to_splits_folder(
		im_path=args.im_path,
		template_img=[tmp_sig1_img, tmp_sig2_img, tmp_sig3_img, tmp_sig4_img],
		save_path=args.save_path
	)

	

# %% ../../nbs/02_preprocess.cut_roi.ipynb 21
if __name__ == '__main__':
	main_()
